import yara
import hashlib
from virus_total import virusTotal
import math 
import magic 
from hash_db import content_array

malware_type = ''
malicious_extension = ['exe', 'src', 'js', 'vbs', 'ps1', 'docm', 'xlsm', 'zip', 'rar','iso', 'msi', 'pif', 'bat', 'hta', 'pptm']
safe_ext = ['png', 'jpg', 'jpeg']
all_ext = ['exe', 'src', 'js', 'vbs', 'ps1', 'docm', 'xlsm', 'zip', 'rar','iso', 'msi', 'pif', 'bat', 'hta', 'pptm','png', 'jpg', 'jpeg','pdf']


def check_malware(attachment):
    hash = hash_file(attachment['content'])
    score = 0
    yara_res = yara_detectation(attachment['content'])
    print(yara_res)
    if hash in content_array:
        score += 10
    score += virusTotal(hash) #10
    score += check_entropy(attachment['content'], attachment['filename']) #10
    score  += check_file_type(attachment['content'],attachment['filename']) #10
    print(score)
    prob = min(int((score/ 50) *100), 100)

    if yara_res[1] == True:
        content_array.append(hash)
        output ={
            'status': "True",
            "file" : attachment['filename'],
            "malware type" : yara_res[0]
        }
        return output
    if prob >= 70:
        output = {
            'status': "True",
            "file" : attachment['filename'],
            "malware type" : "malware"
        } 
        return output
    elif prob >= 50:
        output = {
            'status': "suspicious",
            "file" : attachment['filename'],
            "malware type" : "malware"
        } 
        return output


    output ={
        'status': "False",            
    }  
    return output


     
def hash_file(file_content):
    byte_file = buffer_string_to_bytes(file_content)
    hash_file = hashlib.sha256(byte_file)
    hashed_file = hash_file.hexdigest()
    return hashed_file


def check_entropy(content,filename):
    byte_count = [0]*256
    for b in content['data']:
        byte_count[b] += 1

    entropy = 0
    for count in byte_count:
        if count == 0:
            continue
        p_x = count / len(content['data'])
        entropy -= p_x  * math.log2(p_x)
    print(f'entropy {entropy}')
    total_ext = filename.split('.')
    ext = total_ext[len(total_ext) - 1]
    if ext in safe_ext:
        if entropy >= 8:
            return 20
        elif entropy > 7:
            return 5
        else :
            return 0
    if entropy >= 7:
        return 20
    elif entropy >= 6.5 :
        return 10
    else :
        return 0
    



def check_file_type(buffer,name):
    data = buffer_string_to_bytes(buffer)
    file_type = magic.from_buffer(data)
    print(file_type)
    total_ext = name.split('.')
    if total_ext[len(total_ext)-2]  in all_ext:
        return 40 
    elif total_ext[len(total_ext)-1]  in malicious_extension:
        return 10
    if len(total_ext) > 2:
        return 5
    if 'executable' in file_type.lower():
        return 40
    return 0
    




def buffer_string_to_bytes(buffer_dict):
    if isinstance(buffer_dict, dict) and "data" in buffer_dict:
        return bytes(buffer_dict["data"])
    else:
        raise ValueError("Expected a dict with 'data' key")
    


    
def yara_detectation(content):
    data = buffer_string_to_bytes(content)
    rules = yara.compile(filepath = 'yara_rules.yar')
    match = rules.match(data = data)
    if len(match) == 1:
        if(match[0].rule == 'virus'):
            malware_type = "virus"
            return malware_type,True
        elif match[0].rule  == 'spyware':
            malware_type = 'spyware'
            return malware_type,True
        elif match[0].rule == 'hack_tool':
            malware_type = 'hack-tool'
            return malware_type,True
        elif match[0].rule == 'malware' :
            malware_type = 'malware'
            return malware_type,True
    elif len(match) == 0 :
        malware_type = ''
        return malware_type,False
    
with open ('main.py', 'rb') as f:
    data = f.read()
print(data)
attachment ={
    "content" : {
        "type" : "buffer",
        "data" : data
    },
    'filename' : "main.py"
}

print(check_malware(attachment))